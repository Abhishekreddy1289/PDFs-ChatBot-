["                                                           \n \n                                                             \n                                \n1 \n \n \n \n GenAI Chatbot \n Manual Guide \nPrepared by \nCelebal Technologies \n  \n", "                                                           \n \n                                                             \n                                \n2 \n \nIntroduction \nThis document set provides a comprehensive overview of the GenAI Chatbot, including its \nfunctionalities, error handling procedures, and technical infrastructure. \nKey Components: \n\u2022 \nError Handling: The document details various error scenarios that can occur during \nchatbot interactions. It outlines troubleshooting steps to identify the root cause and \nrectify issues related to backend services, Third Party APIs and Azure resources. \n\u2022 \nLogs Monitoring: The guide instructs on accessing and analysing logs stored within \nAzure Cosmos DB (Mongo DB) and Azure Application Insights. This empowers you to \nreview conversation history, user queries, bot responses. \n\u2022 \nFunctionality of GenAI Chatbot:  This section explores the technical functionalities of \nthe chatbot's core features. It explains the WebSocket-based qnaws route, including \nquery processing, data extraction from third-party APIs, data pre-processing, response \ngeneration, and logging. Additionally, it details the feedback route, covering the \nfeedback saving mechanism, and the speech token route, which returns a token for \nthe Azure Speech Service. \n\u2022 \nTechnical Details of GenAI Chatbot: This section provides specifications for the \nAzure resources utilized by the chatbot system. It details the configuration of Azure \nOpenAI for completion, Azure Mongo DB for data storage, Application Insights for \nmonitoring. \n \nTarget Audience: \nThis documentation caters to various audiences, including: \n\u2022 \nSupport Personnel: The error handling and logs monitoring sections equip support \nteams with the knowledge to troubleshoot issues and analyse chatbot interactions. \n\u2022 \nDevelopers: The functional document empowers developers to understand the \ntechnical aspects of the chatbot's functionalities and APIs. \n\u2022 \nSystem Administrators: The technical document equips system administrators with \ninsights into the configuration and management of Azure resources supporting the \nchatbot system. \n \nBenefits: \nBy utilizing this documentation, users can effectively: \n\u2022 \nTroubleshoot errors: The error handling guide streamlines the process of identifying \nand resolving issues affecting chatbot operations. \n\u2022 \nAnalyse user interactions: Logs monitoring empowers users to understand user \nqueries, chatbot responses, and overall system performance. \n", "                                                           \n \n                                                             \n                                \n3 \n \n\u2022 \nGrasp technical functionalities: The functional document provides a clear \nunderstanding of the chatbot's core functionalities and data processing workflows. \n\u2022 \nManage Azure resources: The technical document equips users with the knowledge \nto manage and maintain the Azure infrastructure supporting the chatbot system. \n \n \n", "                                                           \n \n                                                             \n                                \n4 \n \nTable of Contents \n \nIntroduction ................................................................................................................................ 2 \nTable of Contents........................................................................................................................ 4 \n1. \nError Handling Documentation ............................................................................................ 5 \n1.1. Types of errors:..................................................................................................................................................... 5 \n2. \nLogs Monitoring ................................................................................................................... 7 \n2.1. Azure Cosmos: ...................................................................................................................................................... 7 \n2.2. Azure Application Insight:............................................................................................................................... 9 \n3. \nFunctionality of GenAI Chatbot.......................................................................................... 11 \n3.1. Question and Answering Route .................................................................................................................11 \n3.2. Feedback Route .................................................................................................................................................12 \n3.3. Speech Route ......................................................................................................................................................13 \n4. \nTechnical Details GenAI Chatbot ....................................................................................... 14 \n4.1   Azure OpenAI Service:....................................................................................................................................14 \n4.2   COSMOS Mongo DB.......................................................................................................................................15 \n4.3   Application Insight:..........................................................................................................................................15 \n4.4   Azure Translator: ...............................................................................................................................................15 \n4.5   Azure Speech Service: ....................................................................................................................................15 \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "                                                           \n \n                                                             \n                                \n5 \n \n1. Error Handling Documentation \n1.1. Types of errors: \n1. \u201cLooks like I couldn't help you here. I am still learning to improve my services, \nmeanwhile please feel free to call HR help desk at 85-4700\u201d: \nThis error occurs when there is an issue within the backend. It could be due to various \nreasons such as connection problems of any service like Redis/Azure OpenAI/On Prem \nS3. \nTroubleshooting Steps: \n1. Analyse Azure Cosmos Logs: \no Navigate: Go to the \"Logs Monitoring\" section of the documentation. Locate the \nsection on \"Azure Cosmos.\" \no Review Documentation: Follow the steps outlined in the Azure Cosmos \ndocumentation to gain access to the logs. \no Analyse Logs: \ni. Check the error parameter to know the error category such as \u201cOpenAI  \nfailed\u201d, \u201cthird party api error\u201d and \u201cothers\u201d \nii. \"OpenAI failed\": This category indicates the Azure OpenAI service, \nresponsible for generating responses, is unavailable. \niii. \u201cthird party api error\u201d: This category indicates the Third Party APIs, that \nis responsible for providing stocks related data, is unavailable.  \niv. \u201cothers\u201d: This category indicates there is some python error in code \nbase \no No Logs Found: If no logs are stored for the user's query in Azure Cosmos, proceed \nto the next step. \n \n2.  Analyse Azure Application Insights: \no Navigate: Go to the \"Logs Monitoring\" section of the documentation. Locate the \nsection on \"Azure Application Insights.\" \no Review Documentation: Follow the steps outlined in the Azure Application Insight \ndocumentation to gain access to the Traces, Requests and Exceptions \no Analyse Traces: Analyse the logs to pinpoint where the error originated from \nwithin the code. Look for any error messages or stack traces that can help in \nidentifying the root cause. Below is the table indicating success and failure codes: \n \nSuccess \nAll Services \nSUCCESS: 200 \nFailure \nService Unavailable  \nERROR: 503 \n", "                                                           \n \n                                                             \n                                \n6 \n \nAzure OpenAI \nERROR: 80022, 429 \nAzure Cosmos \nERROR: 80031-80033 \n3. Troubleshooting Indexing Errors by Error Code \nThis section outlines the steps to take when encountering errors during the process, \nidentified by specific error codes. Each section details the potential cause and \nrecommended solutions for the encountered error. \n \n\u27a2 Azure OpenAI Service Errors (80022, 429) \n \n\u2022 \n80022: Failed to Connect with Azure OpenAI GPT-4 \no Cause: Failed to connect with Azure OpenAI GPT-3.5. \no Review API endpoints and authentication mechanisms for accessing the \nAzure OpenAI GPT-3.5 service. Check for any service disruptions or \ndowntime. \n \n\u2022 \n80022: Failed to Connect with Azure OpenAI GPT-4 \no Cause: Failed to connect with Azure OpenAI GPT-4. \no Solution: Review API endpoints and authentication mechanisms for \naccessing the Azure OpenAI GPT-4 service. Check for any service \ndisruptions or downtime. \n\u2022 \n429: OpenAI reached context limit \no \nCause: OpenAI has reached the Rate Limits or Token Limits for processing. \no \nSolution:  \n\u25aa \nConsider optimizing the usage of OpenAI API calls to stay within the RPM \nand TPM. \n\u25aa \nIncrease the TPM/RPM to get the enough quota. \n\u27a2 Azure Cosmos Errors (80031-80033) \n\u2022 \n80031: Cosmos Connectivity Issue \no \nCause: The application cannot establish a connection to the Azure Cosmos service. \no \nSolution: Verify network connectivity to Azure Cosmos. Ensure proper \nconfiguration of Cosmos DB settings and access permissions. \n\u2022 \n80032: No Database or Container Found \no \nCause: The application cannot locate the expected database or container within \nAzure Cosmos. \no \nSolution: Confirm the existence of the specified database and container within \nAzure Cosmos. If missing, create them according to project requirements. \n", "                                                           \n \n                                                             \n                                \n7 \n \n\u2022 \n80033: No Data Present in Container \no \nCause: The Azure Cosmos container exists but lacks the expected data. \no \nSolution: Investigate potential issues with data availability within the Cosmos \ncontainer. Ensure data is correctly ingested and indexed for querying. \n \n2. Logs Monitoring \n2.1. Azure Cosmos: \nThis guide outlines the steps to access conversation history stored within your Azure Cosmos \nDB account. By following these steps, you can retrieve, and review logs related to past \nchatbot interactions: \n1. Sign in to Azure Portal: Navigate to the Azure portal \n(https://portal.azure.com/#home). \n2. Locate Your Cosmos DB Account: Within the Azure portal, search for \"Cosmos DB\" \nand select \u201c adsaz-uks-dev-01\u201d Cosmos DB account. \n3. Access Data Explorer: On the left-hand menu of your Cosmos DB account blade, click \non \"Data Explorer.\" \n4. Expand Database and Collection: In the Data Explorer, expand the \"adss_db.database \nnode. Then, further expand the \u2018uat_adss_db\u2019 collection node and click on \u2018items\u2019. \n5. Filter by Latest Records: \no Click on the \"Edit filter\" button located at the top of the Data Explorer pane. \no In the filter editing window, locate the dropdown menu under the \"ORDER BY\" \nclause. \no You can search for specific conversations by entering a conversation ID or date and \ntime. Here's how: \n\u2022 By \nconversation \nID: \nUse \nthe \nfollowing \nfilter, \nreplacing \n\" \nyour_conversation_id_here \" with the actual conversation ID: \n\u27a2 WHERE c.conversation_id = \"your_conversation_id_here\" ORDER BY c._ts \nDESC \n\u2022 By date and time: Use the following filter, replacing \"your_date_time_here\" with \nthe specific date and time: \n\u27a2 WHERE c.datetime = \"your_date_time_here\" ORDER BY c._ts DESC \no Click \"Apply\" to activate the filter. \n6. Review Logs: \n", "                                                           \n \n                                                             \n                                \n8 \n \no You'll now see a list of log entries within the \"uat_adss_db\" collection, ordered with \nthe most recent entries at the top. Each entry will typically contain details like: \n\u2022 _id: Unique identifier generated by cosmos for the log entry. \n\u2022 Conversation_id: Identifier for the specific chatbot conversation. \no Click on an entry to see specific data related to the conversation interaction, such \nas queries, responses, and response time. \n  \n \n\u27a2 Data Schema for \u201cuat_adss_db\u201d collection: \n \nField Name \nData Type \nDescription \nuser_id \nString \nUnique identifier for user \nconversation_id \nString \nUnique identifier for each conversation. \nsession_id \nString \nUnique identifier for each conversation. \nquery_id \nString \nUnique identifier for each query \nquery \nString \nThe query or question asked by the user. \nrephrased_query \nString \nRephrased query based on previous query \ntranslated_query \nString \nThe query or question translated into English \nanswer \nString \nThe response provided to the user's query. \ntranslated_answer \nString  \nThe response provided the user\u2019s query in english \nquery_intent \nString \nThe category query intented to \nq_start_time \nDict \nTimestamp indicating the date and time when query hit \nfor response. \nq_end_time \n \nDict \nTimestamp indicating the date and time when initial \nquery and data preprocessing completed. \na_start_time \nDict \n \nTimestamp indicating the date and time when GPT4 is \ncalled for response generation. \na_end_time \nDict \n \nTimestamp indicating the date and time when GPT4 \ngenerates complete response. \nresponse_time \nString \nIt is total time taken to generate response  \nInteraction_format \nString \nIt is mode of interaction with chatbot  \nlanguage_detetected \nString \nLanguage of user query (English or Arabic) \nfeedback \nInt \nFlag indicating no feedback, thumbs up and thumbs \ndown \nadditional_feedback \nString \nFeedback given in text  \ntop_hitted_apis \nList \nAPIs used to fetch data  \n", "                                                           \n \n                                                             \n                                \n9 \n \nField Name \nData Type \nDescription \nerror \nString \nError Category encountered during response \ngeneration \nsub_error \nList \nList of sub error category \nrephrase_time \nFloat \nTotal time for rephrasing query \ndata_api_time \nFloat \nTotal time taken to fetch data from Third Party APIs \ngpt4_time \nFloat \nTotal time taken by GPT4 to generate response  \nMapped Instruments \nList \n \n \n \n \n \n \nFigure 2.1 (Data Schema uat_adss_db) \n \n \n \n2.2. Azure Application Insight: \nThis guide provides instructions on accessing and reviewing traces stored within your \nAzure Application Insights resource. By following these steps, you can retrieve and analyse \nlogs related to your user interactions: \n \n1. Sign in to Azure Portal: Navigate to the Azure portal (https://portal.azure.com/#home) \nand sign in with your credentials. \n", "                                                           \n \n                                                             \n                                \n10 \n \n \n2. Locate Your Application Insights Resource: Within the Azure portal, use the search bar \nto find your Application Insights resource. Select \u201cadsaz-uks-dev-gpt-ai\u201d Application \nInsights instance. \n \n3. Access Logs: On the left-hand menu of your Application Insights blade, click on \n\"Transaction Search\", and then click on \u2018See all data in the last 24 hours\u2019. This will open \nthe Analytics graph and traces for your application's telemetry data. \n \n4.   Access Traces, Requests, and Exceptions: Application Insights provides various types \nof telemetry data, including traces, requests, and exceptions, each offering valuable \ninsights into your application's behaviour and performance. \n\u2022 Traces: \nCustom log messages for events, interactions, or operations within your application. \nUseful for tracking execution flow and debugging. \n\u2022 Requests: \nDetails about HTTP requests made to your application, including URL, status code, \nand duration. Helps understand user traffic and optimize responsiveness. \n\u2022 Exceptions: \nErrors or unexpected conditions encountered during application execution. Includes \ndetails like exception type, stack trace, and context. Helps identify and resolve issues \naffecting reliability and user experience. \n \n5. Review Traces: Once you're in the Analytics section, you'll be presented with a variety \nof telemetry data, including traces. Each trace entry typically includes details such as: \n\u2022 Trace message: Description of the trace, indicating the message of the interaction \nin every function. \n\u2022 Timestamp: Date and time when the trace was recorded. \n \nFigure 2.2 (Azure Application Insights logs) \n \n \n", "                                                           \n \n                                                             \n                                \n11 \n \n\u2022 Severity level: Indicates the importance or criticality of the trace, such as \nInformation, Warning, or Error. \n \n \n \n3. Functionality of GenAI Chatbot \nGenAI Chatbot comes with a  feature  of QnA . Following are the details that covers every aspect \nof the GenAI Chatbot functionality. \n \nPlease Click on the below link for Postman Collection of all the routes: \n \n[postman collection link ] \n \n3.1. Question and Answering Route \n \n3.1.1. qnaws route: \nThis function orchestrates the entire process of query processing, response generation, \nanalytics tracking, and logging for the chatbot's question-answering functionality. \nDescription \n \nThis function orchestrates the entire process of query processing, response \ngeneration, and logging for the chatbot's question-answering functionality. \nInput \n \nRequest Method: POST \nHeaders: \n             N/A \nBody (JSON): \nquery \nUser query \nconversation_id \nUnique ID for each conversation \nquery_type \nMode of query text/audio \nJwt_token \nAuthentication token  \n \nOutput \nStream of response  \n \n3.1.2. Response Generation : \nThis section provides a detailed, step-by-step explanation of the complete lifecycle of a user \nquery, from the initial input to the generation of the output response. \n1. The user initiates a query, which first undergoes language detection by Azure Translator. If \nthe query is in English, query is not translated but if is in Arabic it is first translated to English. \n", "                                                           \n \n                                                             \n                                \n12 \n \n  \n2. The query, along with previous interaction history (queries and responses), is then processed \nby the GPT-3.5 model using a specialized prompt designed for refining the user query based on \npast interactions. \n  \n3. The refined query is forwarded to GPT-3.5 again, this time with a specialized prompt to \ndetermine the query's intent and generate a payload for calling Swagger APIs. \n  \n4. GPT-3.5 uses its intelligence to classify the query into one of four categories: news, events, \nsentiment, or others. Based on this classification, a specific prompt is used to interact with \nGPT-3.5 and generate an input payload tailored for third-party API calls. \n  \n5. The generated payload is passed to and executed against the specified APIs, resulting in data \nretrieval. Subsequently, data preprocessing occurs to filter out unnecessary parameters and \nstructure the data into a Markdown table format. \n  \n6. At this stage, context is established for the GPT-4 model to review and respond to the user \nquery. The context, along with a specialized prompt aligned with the query's intent, is provided \nto GPT-4. \n  \n7. GPT-4 analyses the contextual data and formulates an answer based on the received \ninstructions. If the original query was Arabic here the English response is converted to Arabic \nusing Azure Translator. Once the answer is generated, it is saved to Cosmos DB and streamed \nto the front-end application for display. \n \n3.2. Feedback Route \n \n3.2.1. feedback route:  \nThis function orchestrates the process of saving feedback for the chatbot's question-\nanswering functionality. \nDescription \n \nThis function orchestrates the process of saving feedback for the chatbot's \nquestion-answering functionality. \n \n", "                                                           \n \n                                                             \n                                \n13 \n \nInput \n \nRequest Method: POST \nHeaders: \nThe bearer token originating from AWS Cognito is included in the \nAuthorization field. \n              \nBody (JSON): \nquery_id \nA unique identifier for the user query. \nsession_id \nThe unique identifier for the session. \nconversation_id \nThe unique identifier for the conversation. \nfeedback_type \nType of feedback, where 1 represents a \nThumbs Up, -1 represents a Thumbs Down, \nand 0 represents Neutral feedback. \ncomment \nThe text of the user's comment. \n \nOutput \nJSON response includes following fields: \nfeedback \nMessage indicating success or failure. \nstatus_code \nHTTP status code, where 200 indicates success and \n400 indicates failure. \ncomment_status \nIndicates whether the comment field is empty or \nnon-empty. \n \n \n3.2.2. Feedback Saving : \nWhen the response to a user query is finalized, it is stored in Cosmos DB with the feedback \nparameter set to 0 and any additional feedback is stored as an empty string. \nWhen a user clicks thumbs up or thumbs down the feedback API is invoked with an input \npayload containing the query ID, session ID, conversation ID, feedback type, and comment. \nUsing the query ID, session ID, and conversation ID, the corresponding interaction is retrieved \nfrom the database and updated based on the provided feedback type and comment \nparameters. \n \n3.3. Speech Route \n \n3.3.1. speech_token route: \nThis function creates a time limited token designed for accessing speech services, ensuring \nsecure and temporary authorization for specific functional needs within a defined duration. \nDescription \n \nThis function creates a time limited token designed for accessing speech \nservices, ensuring secure and temporary authorization for specific functional \nneeds within a defined duration. \n", "                                                           \n \n                                                             \n                                \n14 \n \nInput \n \nRequest Method: GET \nHeaders: \nThe bearer token originating from AWS Cognito is included in the \nAuthorization field. \n              \nBody (JSON): \n N/A \nOutput \nJSON response includes following fields: \ntoken \nAzure Speech Service Token \nregion \nuksouth \ntoken_expiry \n300 \n \n \n3.3.2. Speech Token Generation: \nThis route accepts GET requests where an AWS Cognito token is passed as a bearer token    \nin the headers. After successful authorization, a function is invoked to generate a speech \ntoken using the speech key and speech URL fetched from Key Vault. Upon successful \ninvocation, the key is generated and returned. \n \n4. Technical Details GenAI Chatbot \n4.1   Azure OpenAI Service: \n\u2022 Azure Resource Group:  \n\u2022 Azure OpenAI Service:  \nCompletion \nmodel \nModel name \ngpt-4 \nModel version \n \nVersion update policy \n \nDeployment type \n \nRegion \n \nContent Filter \n \nProvisioned through put units \n(PTU) \n \nRate limit (Tokens per minute): \n \nRate limit (Requests per minute) \n \nGPT 3.5 \nModel name \ngpt-3.5 \nModel version \n \nVersion update policy \n \nDeployment type \n \nRegion \n \nContent Filter \n \n", "                                                           \n \n                                                             \n                                \n15 \n \n \n \n4.2   COSMOS Mongo DB \n \n \n \n \n4.3   \nApplication Insight: \n \nResource Group \n \nApplication Insight \n \nRegion \n \n \n4.4   Azure Translator: \n \nResource Group \n \nApplication Insight \n \nRegion \n \n \n \n \n4.5 \n \n \nAzure \nSpeech \nService: \n \nResource Group \n \nApplication Insight \n \nRegion \n \n \n \n \n \nProvisioned through put units \n(PTU) \n \nRate limit (Tokens per minute): \n \nRate limit (Requests per minute) \n \nResource Group \n \nCosmos \n \nRegion \n \ndatabase \nMongo DB \n", "                                                           \n \n                                                             \n                                \n16 \n \n \n", "                                                           \n \n                                                             \n                                \n1 \n \n \n \n GenAI Chatbot \n Manual Guide \nPrepared by \nCelebal Technologies \n  \n", "                                                           \n \n                                                             \n                                \n2 \n \nIntroduction \nThis document set provides a comprehensive overview of the GenAI Chatbot, including its \nfunctionalities, error handling procedures, and technical infrastructure. \nKey Components: \n\u2022 \nError Handling: The document details various error scenarios that can occur during \nchatbot interactions. It outlines troubleshooting steps to identify the root cause and \nrectify issues related to backend services, Third Party APIs and Azure resources. \n\u2022 \nLogs Monitoring: The guide instructs on accessing and analysing logs stored within \nAzure Cosmos DB (Mongo DB) and Azure Application Insights. This empowers you to \nreview conversation history, user queries, bot responses. \n\u2022 \nFunctionality of GenAI Chatbot:  This section explores the technical functionalities of \nthe chatbot's core features. It explains the WebSocket-based qnaws route, including \nquery processing, data extraction from third-party APIs, data pre-processing, response \ngeneration, and logging. Additionally, it details the feedback route, covering the \nfeedback saving mechanism, and the speech token route, which returns a token for \nthe Azure Speech Service. \n\u2022 \nTechnical Details of GenAI Chatbot: This section provides specifications for the \nAzure resources utilized by the chatbot system. It details the configuration of Azure \nOpenAI for completion, Azure Mongo DB for data storage, Application Insights for \nmonitoring. \n \nTarget Audience: \nThis documentation caters to various audiences, including: \n\u2022 \nSupport Personnel: The error handling and logs monitoring sections equip support \nteams with the knowledge to troubleshoot issues and analyse chatbot interactions. \n\u2022 \nDevelopers: The functional document empowers developers to understand the \ntechnical aspects of the chatbot's functionalities and APIs. \n\u2022 \nSystem Administrators: The technical document equips system administrators with \ninsights into the configuration and management of Azure resources supporting the \nchatbot system. \n \nBenefits: \nBy utilizing this documentation, users can effectively: \n\u2022 \nTroubleshoot errors: The error handling guide streamlines the process of identifying \nand resolving issues affecting chatbot operations. \n\u2022 \nAnalyse user interactions: Logs monitoring empowers users to understand user \nqueries, chatbot responses, and overall system performance. \n", "                                                           \n \n                                                             \n                                \n3 \n \n\u2022 \nGrasp technical functionalities: The functional document provides a clear \nunderstanding of the chatbot's core functionalities and data processing workflows. \n\u2022 \nManage Azure resources: The technical document equips users with the knowledge \nto manage and maintain the Azure infrastructure supporting the chatbot system. \n \n \n", "                                                           \n \n                                                             \n                                \n4 \n \nTable of Contents \n \nIntroduction ................................................................................................................................ 2 \nTable of Contents........................................................................................................................ 4 \n1. \nError Handling Documentation ............................................................................................ 5 \n1.1. Types of errors:..................................................................................................................................................... 5 \n2. \nLogs Monitoring ................................................................................................................... 7 \n2.1. Azure Cosmos: ...................................................................................................................................................... 7 \n2.2. Azure Application Insight:............................................................................................................................... 9 \n3. \nFunctionality of GenAI Chatbot.......................................................................................... 11 \n3.1. Question and Answering Route .................................................................................................................11 \n3.2. Feedback Route .................................................................................................................................................12 \n3.3. Speech Route ......................................................................................................................................................13 \n4. \nTechnical Details GenAI Chatbot ....................................................................................... 14 \n4.1   Azure OpenAI Service:....................................................................................................................................14 \n4.2   COSMOS Mongo DB.......................................................................................................................................15 \n4.3   Application Insight:..........................................................................................................................................15 \n4.4   Azure Translator: ...............................................................................................................................................15 \n4.5   Azure Speech Service: ....................................................................................................................................15 \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "                                                           \n \n                                                             \n                                \n5 \n \n1. Error Handling Documentation \n1.1. Types of errors: \n1. \u201cLooks like I couldn't help you here. I am still learning to improve my services, \nmeanwhile please feel free to call HR help desk at 85-4700\u201d: \nThis error occurs when there is an issue within the backend. It could be due to various \nreasons such as connection problems of any service like Redis/Azure OpenAI/On Prem \nS3. \nTroubleshooting Steps: \n1. Analyse Azure Cosmos Logs: \no Navigate: Go to the \"Logs Monitoring\" section of the documentation. Locate the \nsection on \"Azure Cosmos.\" \no Review Documentation: Follow the steps outlined in the Azure Cosmos \ndocumentation to gain access to the logs. \no Analyse Logs: \ni. Check the error parameter to know the error category such as \u201cOpenAI  \nfailed\u201d, \u201cthird party api error\u201d and \u201cothers\u201d \nii. \"OpenAI failed\": This category indicates the Azure OpenAI service, \nresponsible for generating responses, is unavailable. \niii. \u201cthird party api error\u201d: This category indicates the Third Party APIs, that \nis responsible for providing stocks related data, is unavailable.  \niv. \u201cothers\u201d: This category indicates there is some python error in code \nbase \no No Logs Found: If no logs are stored for the user's query in Azure Cosmos, proceed \nto the next step. \n \n2.  Analyse Azure Application Insights: \no Navigate: Go to the \"Logs Monitoring\" section of the documentation. Locate the \nsection on \"Azure Application Insights.\" \no Review Documentation: Follow the steps outlined in the Azure Application Insight \ndocumentation to gain access to the Traces, Requests and Exceptions \no Analyse Traces: Analyse the logs to pinpoint where the error originated from \nwithin the code. Look for any error messages or stack traces that can help in \nidentifying the root cause. Below is the table indicating success and failure codes: \n \nSuccess \nAll Services \nSUCCESS: 200 \nFailure \nService Unavailable  \nERROR: 503 \n", "                                                           \n \n                                                             \n                                \n6 \n \nAzure OpenAI \nERROR: 80022, 429 \nAzure Cosmos \nERROR: 80031-80033 \n3. Troubleshooting Indexing Errors by Error Code \nThis section outlines the steps to take when encountering errors during the process, \nidentified by specific error codes. Each section details the potential cause and \nrecommended solutions for the encountered error. \n \n\u27a2 Azure OpenAI Service Errors (80022, 429) \n \n\u2022 \n80022: Failed to Connect with Azure OpenAI GPT-4 \no Cause: Failed to connect with Azure OpenAI GPT-3.5. \no Review API endpoints and authentication mechanisms for accessing the \nAzure OpenAI GPT-3.5 service. Check for any service disruptions or \ndowntime. \n \n\u2022 \n80022: Failed to Connect with Azure OpenAI GPT-4 \no Cause: Failed to connect with Azure OpenAI GPT-4. \no Solution: Review API endpoints and authentication mechanisms for \naccessing the Azure OpenAI GPT-4 service. Check for any service \ndisruptions or downtime. \n\u2022 \n429: OpenAI reached context limit \no \nCause: OpenAI has reached the Rate Limits or Token Limits for processing. \no \nSolution:  \n\u25aa \nConsider optimizing the usage of OpenAI API calls to stay within the RPM \nand TPM. \n\u25aa \nIncrease the TPM/RPM to get the enough quota. \n\u27a2 Azure Cosmos Errors (80031-80033) \n\u2022 \n80031: Cosmos Connectivity Issue \no \nCause: The application cannot establish a connection to the Azure Cosmos service. \no \nSolution: Verify network connectivity to Azure Cosmos. Ensure proper \nconfiguration of Cosmos DB settings and access permissions. \n\u2022 \n80032: No Database or Container Found \no \nCause: The application cannot locate the expected database or container within \nAzure Cosmos. \no \nSolution: Confirm the existence of the specified database and container within \nAzure Cosmos. If missing, create them according to project requirements. \n", "                                                           \n \n                                                             \n                                \n7 \n \n\u2022 \n80033: No Data Present in Container \no \nCause: The Azure Cosmos container exists but lacks the expected data. \no \nSolution: Investigate potential issues with data availability within the Cosmos \ncontainer. Ensure data is correctly ingested and indexed for querying. \n \n2. Logs Monitoring \n2.1. Azure Cosmos: \nThis guide outlines the steps to access conversation history stored within your Azure Cosmos \nDB account. By following these steps, you can retrieve, and review logs related to past \nchatbot interactions: \n1. Sign in to Azure Portal: Navigate to the Azure portal \n(https://portal.azure.com/#home). \n2. Locate Your Cosmos DB Account: Within the Azure portal, search for \"Cosmos DB\" \nand select \u201c adsaz-uks-dev-01\u201d Cosmos DB account. \n3. Access Data Explorer: On the left-hand menu of your Cosmos DB account blade, click \non \"Data Explorer.\" \n4. Expand Database and Collection: In the Data Explorer, expand the \"adss_db.database \nnode. Then, further expand the \u2018uat_adss_db\u2019 collection node and click on \u2018items\u2019. \n5. Filter by Latest Records: \no Click on the \"Edit filter\" button located at the top of the Data Explorer pane. \no In the filter editing window, locate the dropdown menu under the \"ORDER BY\" \nclause. \no You can search for specific conversations by entering a conversation ID or date and \ntime. Here's how: \n\u2022 By \nconversation \nID: \nUse \nthe \nfollowing \nfilter, \nreplacing \n\" \nyour_conversation_id_here \" with the actual conversation ID: \n\u27a2 WHERE c.conversation_id = \"your_conversation_id_here\" ORDER BY c._ts \nDESC \n\u2022 By date and time: Use the following filter, replacing \"your_date_time_here\" with \nthe specific date and time: \n\u27a2 WHERE c.datetime = \"your_date_time_here\" ORDER BY c._ts DESC \no Click \"Apply\" to activate the filter. \n6. Review Logs: \n", "                                                           \n \n                                                             \n                                \n8 \n \no You'll now see a list of log entries within the \"uat_adss_db\" collection, ordered with \nthe most recent entries at the top. Each entry will typically contain details like: \n\u2022 _id: Unique identifier generated by cosmos for the log entry. \n\u2022 Conversation_id: Identifier for the specific chatbot conversation. \no Click on an entry to see specific data related to the conversation interaction, such \nas queries, responses, and response time. \n  \n \n\u27a2 Data Schema for \u201cuat_adss_db\u201d collection: \n \nField Name \nData Type \nDescription \nuser_id \nString \nUnique identifier for user \nconversation_id \nString \nUnique identifier for each conversation. \nsession_id \nString \nUnique identifier for each conversation. \nquery_id \nString \nUnique identifier for each query \nquery \nString \nThe query or question asked by the user. \nrephrased_query \nString \nRephrased query based on previous query \ntranslated_query \nString \nThe query or question translated into English \nanswer \nString \nThe response provided to the user's query. \ntranslated_answer \nString  \nThe response provided the user\u2019s query in english \nquery_intent \nString \nThe category query intented to \nq_start_time \nDict \nTimestamp indicating the date and time when query hit \nfor response. \nq_end_time \n \nDict \nTimestamp indicating the date and time when initial \nquery and data preprocessing completed. \na_start_time \nDict \n \nTimestamp indicating the date and time when GPT4 is \ncalled for response generation. \na_end_time \nDict \n \nTimestamp indicating the date and time when GPT4 \ngenerates complete response. \nresponse_time \nString \nIt is total time taken to generate response  \nInteraction_format \nString \nIt is mode of interaction with chatbot  \nlanguage_detetected \nString \nLanguage of user query (English or Arabic) \nfeedback \nInt \nFlag indicating no feedback, thumbs up and thumbs \ndown \nadditional_feedback \nString \nFeedback given in text  \ntop_hitted_apis \nList \nAPIs used to fetch data  \n", "                                                           \n \n                                                             \n                                \n9 \n \nField Name \nData Type \nDescription \nerror \nString \nError Category encountered during response \ngeneration \nsub_error \nList \nList of sub error category \nrephrase_time \nFloat \nTotal time for rephrasing query \ndata_api_time \nFloat \nTotal time taken to fetch data from Third Party APIs \ngpt4_time \nFloat \nTotal time taken by GPT4 to generate response  \nMapped Instruments \nList \n \n \n \n \n \n \nFigure 2.1 (Data Schema uat_adss_db) \n \n \n \n2.2. Azure Application Insight: \nThis guide provides instructions on accessing and reviewing traces stored within your \nAzure Application Insights resource. By following these steps, you can retrieve and analyse \nlogs related to your user interactions: \n \n1. Sign in to Azure Portal: Navigate to the Azure portal (https://portal.azure.com/#home) \nand sign in with your credentials. \n", "                                                           \n \n                                                             \n                                \n10 \n \n \n2. Locate Your Application Insights Resource: Within the Azure portal, use the search bar \nto find your Application Insights resource. Select \u201cadsaz-uks-dev-gpt-ai\u201d Application \nInsights instance. \n \n3. Access Logs: On the left-hand menu of your Application Insights blade, click on \n\"Transaction Search\", and then click on \u2018See all data in the last 24 hours\u2019. This will open \nthe Analytics graph and traces for your application's telemetry data. \n \n4.   Access Traces, Requests, and Exceptions: Application Insights provides various types \nof telemetry data, including traces, requests, and exceptions, each offering valuable \ninsights into your application's behaviour and performance. \n\u2022 Traces: \nCustom log messages for events, interactions, or operations within your application. \nUseful for tracking execution flow and debugging. \n\u2022 Requests: \nDetails about HTTP requests made to your application, including URL, status code, \nand duration. Helps understand user traffic and optimize responsiveness. \n\u2022 Exceptions: \nErrors or unexpected conditions encountered during application execution. Includes \ndetails like exception type, stack trace, and context. Helps identify and resolve issues \naffecting reliability and user experience. \n \n5. Review Traces: Once you're in the Analytics section, you'll be presented with a variety \nof telemetry data, including traces. Each trace entry typically includes details such as: \n\u2022 Trace message: Description of the trace, indicating the message of the interaction \nin every function. \n\u2022 Timestamp: Date and time when the trace was recorded. \n \nFigure 2.2 (Azure Application Insights logs) \n \n \n", "                                                           \n \n                                                             \n                                \n11 \n \n\u2022 Severity level: Indicates the importance or criticality of the trace, such as \nInformation, Warning, or Error. \n \n \n \n3. Functionality of GenAI Chatbot \nGenAI Chatbot comes with a  feature  of QnA . Following are the details that covers every aspect \nof the GenAI Chatbot functionality. \n \nPlease Click on the below link for Postman Collection of all the routes: \n \n[postman collection link ] \n \n3.1. Question and Answering Route \n \n3.1.1. qnaws route: \nThis function orchestrates the entire process of query processing, response generation, \nanalytics tracking, and logging for the chatbot's question-answering functionality. \nDescription \n \nThis function orchestrates the entire process of query processing, response \ngeneration, and logging for the chatbot's question-answering functionality. \nInput \n \nRequest Method: POST \nHeaders: \n             N/A \nBody (JSON): \nquery \nUser query \nconversation_id \nUnique ID for each conversation \nquery_type \nMode of query text/audio \nJwt_token \nAuthentication token  \n \nOutput \nStream of response  \n \n3.1.2. Response Generation : \nThis section provides a detailed, step-by-step explanation of the complete lifecycle of a user \nquery, from the initial input to the generation of the output response. \n1. The user initiates a query, which first undergoes language detection by Azure Translator. If \nthe query is in English, query is not translated but if is in Arabic it is first translated to English. \n", "                                                           \n \n                                                             \n                                \n12 \n \n  \n2. The query, along with previous interaction history (queries and responses), is then processed \nby the GPT-3.5 model using a specialized prompt designed for refining the user query based on \npast interactions. \n  \n3. The refined query is forwarded to GPT-3.5 again, this time with a specialized prompt to \ndetermine the query's intent and generate a payload for calling Swagger APIs. \n  \n4. GPT-3.5 uses its intelligence to classify the query into one of four categories: news, events, \nsentiment, or others. Based on this classification, a specific prompt is used to interact with \nGPT-3.5 and generate an input payload tailored for third-party API calls. \n  \n5. The generated payload is passed to and executed against the specified APIs, resulting in data \nretrieval. Subsequently, data preprocessing occurs to filter out unnecessary parameters and \nstructure the data into a Markdown table format. \n  \n6. At this stage, context is established for the GPT-4 model to review and respond to the user \nquery. The context, along with a specialized prompt aligned with the query's intent, is provided \nto GPT-4. \n  \n7. GPT-4 analyses the contextual data and formulates an answer based on the received \ninstructions. If the original query was Arabic here the English response is converted to Arabic \nusing Azure Translator. Once the answer is generated, it is saved to Cosmos DB and streamed \nto the front-end application for display. \n \n3.2. Feedback Route \n \n3.2.1. feedback route:  \nThis function orchestrates the process of saving feedback for the chatbot's question-\nanswering functionality. \nDescription \n \nThis function orchestrates the process of saving feedback for the chatbot's \nquestion-answering functionality. \n \n", "                                                           \n \n                                                             \n                                \n13 \n \nInput \n \nRequest Method: POST \nHeaders: \nThe bearer token originating from AWS Cognito is included in the \nAuthorization field. \n              \nBody (JSON): \nquery_id \nA unique identifier for the user query. \nsession_id \nThe unique identifier for the session. \nconversation_id \nThe unique identifier for the conversation. \nfeedback_type \nType of feedback, where 1 represents a \nThumbs Up, -1 represents a Thumbs Down, \nand 0 represents Neutral feedback. \ncomment \nThe text of the user's comment. \n \nOutput \nJSON response includes following fields: \nfeedback \nMessage indicating success or failure. \nstatus_code \nHTTP status code, where 200 indicates success and \n400 indicates failure. \ncomment_status \nIndicates whether the comment field is empty or \nnon-empty. \n \n \n3.2.2. Feedback Saving : \nWhen the response to a user query is finalized, it is stored in Cosmos DB with the feedback \nparameter set to 0 and any additional feedback is stored as an empty string. \nWhen a user clicks thumbs up or thumbs down the feedback API is invoked with an input \npayload containing the query ID, session ID, conversation ID, feedback type, and comment. \nUsing the query ID, session ID, and conversation ID, the corresponding interaction is retrieved \nfrom the database and updated based on the provided feedback type and comment \nparameters. \n \n3.3. Speech Route \n \n3.3.1. speech_token route: \nThis function creates a time limited token designed for accessing speech services, ensuring \nsecure and temporary authorization for specific functional needs within a defined duration. \nDescription \n \nThis function creates a time limited token designed for accessing speech \nservices, ensuring secure and temporary authorization for specific functional \nneeds within a defined duration. \n", "                                                           \n \n                                                             \n                                \n14 \n \nInput \n \nRequest Method: GET \nHeaders: \nThe bearer token originating from AWS Cognito is included in the \nAuthorization field. \n              \nBody (JSON): \n N/A \nOutput \nJSON response includes following fields: \ntoken \nAzure Speech Service Token \nregion \nuksouth \ntoken_expiry \n300 \n \n \n3.3.2. Speech Token Generation: \nThis route accepts GET requests where an AWS Cognito token is passed as a bearer token    \nin the headers. After successful authorization, a function is invoked to generate a speech \ntoken using the speech key and speech URL fetched from Key Vault. Upon successful \ninvocation, the key is generated and returned. \n \n4. Technical Details GenAI Chatbot \n4.1   Azure OpenAI Service: \n\u2022 Azure Resource Group:  \n\u2022 Azure OpenAI Service:  \nCompletion \nmodel \nModel name \ngpt-4 \nModel version \n \nVersion update policy \n \nDeployment type \n \nRegion \n \nContent Filter \n \nProvisioned through put units \n(PTU) \n \nRate limit (Tokens per minute): \n \nRate limit (Requests per minute) \n \nGPT 3.5 \nModel name \ngpt-3.5 \nModel version \n \nVersion update policy \n \nDeployment type \n \nRegion \n \nContent Filter \n \n", "                                                           \n \n                                                             \n                                \n15 \n \n \n \n4.2   COSMOS Mongo DB \n \n \n \n \n4.3   \nApplication Insight: \n \nResource Group \n \nApplication Insight \n \nRegion \n \n \n4.4   Azure Translator: \n \nResource Group \n \nApplication Insight \n \nRegion \n \n \n \n \n4.5 \n \n \nAzure \nSpeech \nService: \n \nResource Group \n \nApplication Insight \n \nRegion \n \n \n \n \n \nProvisioned through put units \n(PTU) \n \nRate limit (Tokens per minute): \n \nRate limit (Requests per minute) \n \nResource Group \n \nCosmos \n \nRegion \n \ndatabase \nMongo DB \n", "                                                           \n \n                                                             \n                                \n16 \n \n \n"]